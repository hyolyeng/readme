import os
import time

import onnxruntime
import soundfile as sf
from kokoro_onnx import Kokoro
from onnxruntime import InferenceSession
import defopt


def main():
    t = time.time()
    kokoro = Kokoro("kokoro-v0_19.onnx", "voices.bin")
    print("load", time.time() - t)
    print(kokoro.get_voices())
    samples, sample_rate = kokoro.create(
        "Hello. This audio generated by kokoro!", voice="af_sarah", speed=1.0, lang="en-us"
    )
    print(f"{time.time() - t:.2f}")
    samples, sample_rate = kokoro.create(
        "Hello. This audio generated by kokoro!", voice="af_sarah", speed=1.0, lang="en-us"
    )
    print(f"{time.time() - t:.2f}")

    print("Created audio.wav", time.time() - t)
    sf.write("audio.wav", samples, sample_rate)
    print("Wrote to disk", time.time() - t)


def create_session():
    # See list of providers https://github.com/microsoft/onnxruntime/issues/22101#issuecomment-2357667377
    providers = onnxruntime.get_available_providers()
    print(f"Available onnx runtime providers: {providers}")

    # See session options https://onnxruntime.ai/docs/performance/tune-performance/threading.html#thread-management
    sess_options = onnxruntime.SessionOptions()
    # Set threads to num of CPU cores
    cpu_count = os.cpu_count()
    print(f"Setting threads to CPU cores count: {cpu_count}")
    sess_options.intra_op_num_threads = cpu_count
    session = InferenceSession(
        "kokoro-v0_19.onnx", providers=providers, sess_options=sess_options
    )
    return session


def session():
    t = time.time()
    session = create_session()
    print(f"{time.time() - t:.2f}")
    kokoro = Kokoro.from_session(session, "voices.bin")
    print(f"{time.time() - t:.2f}")
    samples, sample_rate = kokoro.create(
        "Hello. This audio was generated by kokoro!", voice="af_sarah", speed=1.0, lang="en-us"
    )
    print(f"{time.time() - t:.2f}")
    samples, sample_rate = kokoro.create(
        "Hello. My name is Bob!", voice="af_sarah", speed=1.0, lang="en-us"
    )
    print(f"{time.time() - t:.2f}")
    sf.write("audio.wav", samples, sample_rate)
    print(f"{time.time() - t:.2f}")
    print("Created audio.wav")


if __name__ == "__main__":
    defopt.run([main, session])
